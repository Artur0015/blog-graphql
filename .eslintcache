[{"C:\\Users\\user\\WebstormProjects\\blog\\src\\index.tsx":"1","C:\\Users\\user\\WebstormProjects\\blog\\src\\reportWebVitals.ts":"2","C:\\Users\\user\\WebstormProjects\\blog\\src\\App.tsx":"3","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\article-container.tsx":"4","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\comments.tsx":"5","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\paginator.tsx":"6","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\article.tsx":"7","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\preloader\\preloader.tsx":"8","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\profile\\profile.tsx":"9","C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\apollo-client.ts":"10","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\menu.tsx":"11","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\login\\login.tsx":"12","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\signup\\signup.tsx":"13","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\write\\write.tsx":"14","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\navigation\\navigtaion.tsx":"15","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\post.tsx":"16","C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\article.ts":"17","C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\auth.ts":"18","C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\profile.ts":"19","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\profile\\user-info.tsx":"20","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\error\\error.tsx":"21"},{"size":598,"mtime":1613573152799,"results":"22","hashOfConfig":"23"},{"size":438,"mtime":1611423520423,"results":"24","hashOfConfig":"23"},{"size":1280,"mtime":1613562326242,"results":"25","hashOfConfig":"23"},{"size":3430,"mtime":1613651099297,"results":"26","hashOfConfig":"23"},{"size":1360,"mtime":1613651099264,"results":"27","hashOfConfig":"23"},{"size":1261,"mtime":1613651099238,"results":"28","hashOfConfig":"23"},{"size":1638,"mtime":1613650560700,"results":"29","hashOfConfig":"23"},{"size":243,"mtime":1613665593560,"results":"30","hashOfConfig":"23"},{"size":3338,"mtime":1613659977409,"results":"31","hashOfConfig":"23"},{"size":314,"mtime":1613380620926,"results":"32","hashOfConfig":"23"},{"size":1276,"mtime":1613651099284,"results":"33","hashOfConfig":"23"},{"size":2267,"mtime":1613649192667,"results":"34","hashOfConfig":"23"},{"size":2545,"mtime":1613236435174,"results":"35","hashOfConfig":"23"},{"size":2632,"mtime":1613642621336,"results":"36","hashOfConfig":"23"},{"size":2173,"mtime":1613651611150,"results":"37","hashOfConfig":"23"},{"size":690,"mtime":1613234611870,"results":"38","hashOfConfig":"23"},{"size":1700,"mtime":1613473617842,"results":"39","hashOfConfig":"23"},{"size":905,"mtime":1613587424944,"results":"40","hashOfConfig":"23"},{"size":876,"mtime":1613641647796,"results":"41","hashOfConfig":"23"},{"size":2193,"mtime":1613644873109,"results":"42","hashOfConfig":"23"},{"size":444,"mtime":1613562404751,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"1y0fs7y",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"46"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},"C:\\Users\\user\\WebstormProjects\\blog\\src\\index.tsx",[],["93","94"],"C:\\Users\\user\\WebstormProjects\\blog\\src\\reportWebVitals.ts",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\App.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\article-container.tsx",["95"],"import React from 'react'\r\nimport {useParams} from \"react-router-dom\"\r\nimport Article from \"./article\"\r\nimport Comments from \"./comments\"\r\nimport Preloader from \"../preloader/preloader\"\r\nimport {\r\n    ADD_COMMENT,\r\n    CHANGE_ARTICLE,\r\n    ChangedArticleType,\r\n    GET_ARTICLE_BY_ID,\r\n    GetArticleByIdResponseType, NewCommentType,\r\n} from \"../../apollo/queries/article\";\r\nimport {useMutation, useQuery, useReactiveVar} from \"@apollo/client\";\r\nimport {CommentType, UserType} from \"../../apollo/apollo-types\";\r\nimport {userVar} from \"../navigation/navigtaion\";\r\nimport Error from \"../error/error\";\r\n\r\n\r\nconst ArticleContainer = () => {\r\n    const articleId = Number(useParams<{ articleId: string }>().articleId)\r\n    const {data, loading, error} = useQuery<GetArticleByIdResponseType>(GET_ARTICLE_BY_ID, {\r\n        variables: {id: articleId}\r\n    })\r\n    const user = useReactiveVar<UserType | null>(userVar)\r\n    const [changeArticle] = useMutation<ChangedArticleType>(CHANGE_ARTICLE)\r\n    const [addComment] = useMutation<NewCommentType>(ADD_COMMENT, {\r\n        update(cache, {data}) {\r\n            const articleData = cache.readQuery<GetArticleByIdResponseType>({\r\n                query: GET_ARTICLE_BY_ID,\r\n                variables: {id: articleId}\r\n            })\r\n            if (articleData && data) {\r\n                const comments = articleData.getArticleById.comments\r\n                const newComment = data.addComment\r\n                cache.writeQuery({\r\n                    query: GET_ARTICLE_BY_ID,\r\n                    variables: {id: articleId},\r\n                    data: {\r\n                        getArticleById: {...articleData.getArticleById, comments: [...comments, newComment]}\r\n                    }\r\n                })\r\n            }\r\n\r\n        }\r\n    })\r\n\r\n\r\n    async function handleCommentAddButtonClick(text: string) {\r\n        if(user){\r\n        addComment({\r\n            variables: {articleId, text},\r\n            optimisticResponse: {\r\n                __typename: 'Mutation',\r\n                addComment: {\r\n                    __typename: 'CommentType',\r\n                    text,\r\n                    author: user,\r\n                    id: -parseInt(    // <- copypasted\r\n                        Math.random()\r\n                            .toString(8)\r\n                            .substr(2, 9),\r\n                        10)\r\n                }\r\n            }\r\n        })\r\n    }}\r\n\r\n    async function handleArticleSave(text: string) {\r\n        changeArticle({\r\n            variables: {id: articleId, text},\r\n            optimisticResponse: {\r\n                __typename: 'Mutation',\r\n                changeArticle: {\r\n                    text,\r\n                    id: articleId,\r\n                    __typename: \"ArticleType\"\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    if(loading) {\r\n        return <Preloader />\r\n    }\r\n\r\n    if(data && !error) {\r\n        const article = data.getArticleById\r\n        const isOwner = user?.username === article.author.username\r\n        const isAuthenticated = !!user\r\n        return <div>\r\n                <Article article={article} changeArticle={handleArticleSave} isOwner={isOwner}/>\r\n                <Comments comments={article.comments} addComment={handleCommentAddButtonClick}\r\n                          isAuthenticated={isAuthenticated}/>\r\n        </div>\r\n        }\r\n\r\n    return <Error />\r\n}\r\n\r\n        export default ArticleContainer","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\comments.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\paginator.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\article\\article.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\preloader\\preloader.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\profile\\profile.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\apollo-client.ts",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\menu.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\login\\login.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\signup\\signup.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\write\\write.tsx",["96","97"],"import {useHistory} from \"react-router\";\r\nimport * as Yup from \"yup\";\r\nimport {ErrorMessage, Field, Form, Formik, FormikHelpers} from \"formik\";\r\nimport s from \"./write.module.css\";\r\nimport React from \"react\";\r\nimport {useMutation, useReactiveVar} from \"@apollo/client\";\r\nimport {\r\n    CREATE_ARTICLE,\r\n    CreateArticleResponseType,\r\n} from \"../../apollo/queries/article\";\r\nimport {ArticleType} from \"../../apollo/apollo-types\";\r\nimport {userVar} from \"../navigation/navigtaion\";\r\nimport Error from \"../error/error\";\r\n\r\n\r\nconst validationSchema = Yup.object({\r\n    header: Yup.string().required(),\r\n    text: Yup.string().required().min(5)\r\n})\r\n\r\nconst initialValues = {\r\n    header: '',\r\n    text: ''\r\n}\r\n\r\ntype valuesType = typeof initialValues\r\n\r\nfunction Write() {\r\n    const history = useHistory()\r\n    const [createArticle] = useMutation<CreateArticleResponseType>(CREATE_ARTICLE)\r\n    const user = useReactiveVar(userVar)\r\n\r\n\r\n    async function handleSubmit(values: valuesType, ev: FormikHelpers<valuesType>) {\r\n        if (user) {\r\n            await createArticle({\r\n                    variables: values,\r\n                    update(cache, {data}) {\r\n                        if (!data) {\r\n                            ev.setErrors({header: 'Something went wrong'})\r\n                            return\r\n                        }\r\n                        cache.modify({\r\n                            fields: {\r\n                                getArticles({articles}: { articles: Array<ArticleType> }): Array<ArticleType> {\r\n                                    return [data.createArticle, ...articles]\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                }\r\n            )\r\n            history.push('/menu')\r\n        } else {\r\n            ev.setErrors({header: \"You are not authenticated\"})\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <Formik validationSchema={validationSchema}\r\n                initialValues={initialValues}\r\n                onSubmit={handleSubmit}>\r\n            <Form className={s.form}>\r\n                <h1>New Article</h1>\r\n                <label htmlFor='header'>Article header</label>\r\n                <Field name=\"header\"/>\r\n                <ErrorMessage name='header'>{msg => <span>{msg}</span>}</ErrorMessage>\r\n                <label>Article content</label>\r\n                <Field name='text' as='textarea'/>\r\n                <ErrorMessage name='text'>{msg => <span>{msg}</span>}</ErrorMessage>\r\n                <button disabled={false}>Save</button>\r\n            </Form>\r\n        </Formik>)\r\n}\r\n\r\nexport default Write","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\navigation\\navigtaion.tsx",["98"],"import React, {useEffect} from 'react'\r\nimport cn from \"classnames\";\r\nimport s from \"./navigation.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {\r\n    GET_CURRENT_USER_INFO,\r\n    GetCurrentUserInfoResponseType,\r\n    LOGOUT_USER,\r\n    LogoutResponseType\r\n} from \"../../apollo/queries/auth\";\r\nimport {makeVar, useMutation, useQuery, useReactiveVar} from \"@apollo/client\";\r\nimport {UserType} from \"../../apollo/apollo-types\";\r\n\r\n\r\nexport const userVar = makeVar<UserType | null>(null)\r\n\r\n\r\nfunction Navigation() {\r\n    const [buttonText, setButtonText] = React.useState('>')\r\n    const user = useReactiveVar<null | UserType>(userVar)\r\n    const {data, loading} = useQuery<GetCurrentUserInfoResponseType>(GET_CURRENT_USER_INFO)\r\n    const [logoutUser] = useMutation<LogoutResponseType>(LOGOUT_USER)\r\n\r\n\r\n    useEffect(() => {\r\n        userVar(data?.currentUser || null)\r\n    }, [data])\r\n\r\n    function handleClick() {\r\n        if (buttonText === '>') {\r\n            setButtonText('<')\r\n        } else {\r\n            setButtonText('>')\r\n        }\r\n    }\r\n\r\n    async function handleLogoutClick() {\r\n        await logoutUser()\r\n        userVar(null)\r\n    }\r\n\r\n    if (loading) {\r\n        return <></>\r\n    }\r\n\r\n\r\n    return <div className={cn({[s.non_active]: buttonText === '>'}, s.nav)}>\r\n        <button onClick={handleClick}>{buttonText}</button>\r\n        {user && <img src={user.photo} alt={'photo'}/>}\r\n        <span><NavLink to='/menu' activeClassName={s.active_button}>Menu</NavLink></span>\r\n        {user\r\n            ? <>\r\n                <span> <NavLink to='/write' activeClassName={s.active_button}>Write</NavLink></span>\r\n                <span> <NavLink to={'/profile/' + user.username} activeClassName={s.active_button}>Profile</NavLink></span>\r\n                <span><NavLink to='/menu' onClick={handleLogoutClick}>Log Out</NavLink></span>\r\n            </>\r\n            : <>\r\n                <span><NavLink to='/login' activeClassName={s.active_button}>Log in</NavLink></span>\r\n                <span><NavLink to='/signup' activeClassName={s.active_button}>Sign up</NavLink></span>\r\n\r\n            </>}\r\n    </div>\r\n}\r\n\r\n\r\nexport default Navigation","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\menu\\post.tsx",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\article.ts",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\auth.ts",["99"],"import {gql} from \"@apollo/client\";\r\nimport {UserType} from \"../apollo-types\";\r\nimport {resolveSrv} from \"dns\";\r\n\r\nexport const LOGIN_USER = gql`\r\nmutation ($username:String!, $password:String!, $rememberMe: Boolean!){\r\n  loginUser(username:$username, password:$password, rememberMe:$rememberMe) {\r\n    id\r\n    username\r\n    photo\r\n  }\r\n}\r\n`\r\n\r\nexport const LOGOUT_USER = gql`mutation {\r\n  logoutUser{\r\n    response\r\n  }\r\n}`\r\n\r\nexport const CREATE_USER = gql`\r\nmutation ($username:String!, $password:String!){\r\n  createUser(username:$username, password:$password) {\r\n    response\r\n  }\r\n}\r\n`\r\n\r\nexport const GET_CURRENT_USER_INFO = gql`\r\nquery{\r\n  currentUser{\r\n    id\r\n    username\r\n    photo\r\n  }\r\n}\r\n`\r\n\r\nexport const UPLOAD_PHOTO = gql`mutation ($file: Upload!) {\r\n  upload(file: $file) {\r\n    ok\r\n  }\r\n}`\r\n\r\nexport type UploadFileResponseType = {\r\n    upload: {\r\n        ok: boolean\r\n    }\r\n}\r\n\r\nexport type GetCurrentUserInfoResponseType = {\r\n    currentUser: UserType | null\r\n}\r\n\r\nexport type LoginUserResponseType = {\r\n    loginUser: UserType\r\n}\r\n\r\nexport type LogoutResponseType = {\r\n    logoutUser: { response: string }\r\n}","C:\\Users\\user\\WebstormProjects\\blog\\src\\apollo\\queries\\profile.ts",[],"C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\profile\\user-info.tsx",["100"],"import React from \"react\";\r\nimport {ChangeEvent, useRef, useState} from \"react\";\r\nimport s from './profile.module.css'\r\nimport {UserProfileType} from \"../../apollo/apollo-types\";\r\n\r\n\r\ntype PropsType = {\r\n    changeAboutMe: (text: string) => void\r\n    user: UserProfileType\r\n    isOwner: boolean\r\n    setPhoto: (ev: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nfunction UserInfo({changeAboutMe, user, isOwner, setPhoto}: PropsType) {\r\n    const [text, setText] = useState(user.aboutMe)\r\n    const [isEditMode, changeEditModeTo] = useState(false)\r\n    const imageInputRef = useRef<HTMLInputElement | null>(null)\r\n\r\n\r\n    function clickFileInput() {\r\n        if (imageInputRef.current) {\r\n            imageInputRef.current.click()\r\n        }\r\n    }\r\n\r\n    function activateEditMode() {\r\n        if (isOwner) {\r\n            changeEditModeTo(true)\r\n        }\r\n    }\r\n\r\n    function dropChanges() {\r\n        setText(user.aboutMe)\r\n        changeEditModeTo(false)\r\n    }\r\n\r\n    function saveChanges() {\r\n        changeAboutMe(text)\r\n        changeEditModeTo(false)\r\n    }\r\n\r\n    function handleTextChange(ev: ChangeEvent<HTMLTextAreaElement>) {\r\n        setText(ev.target.value)\r\n    }\r\n\r\n\r\n    return <>\r\n        <div className={s.image_space}>\r\n            <img src={user.photo} alt=\"photo\"/>\r\n            {isOwner && <>\r\n                <button onClick={clickFileInput}>Upload image</button>\r\n                <input type=\"file\" style={{display: 'none'}} ref={imageInputRef} onChange={setPhoto}/>\r\n            </>}\r\n        </div>\r\n        <div className={s.about}>\r\n            {isEditMode\r\n                ? <textarea value={text} onChange={handleTextChange} onDoubleClick={dropChanges} onKeyPress={ev => {\r\n                    if (ev.key === 'Enter') {\r\n                        saveChanges()\r\n                    }\r\n                }}/>\r\n                : <p onDoubleClick={activateEditMode}>{user.aboutMe || 'User didn\\'t tell anything about himself'}</p>\r\n            }\r\n        </div>\r\n    </>\r\n}\r\n\r\n// const UserInfo = () => {\r\n//     return <>Ok</>\r\n// }\r\n\r\nexport default UserInfo","C:\\Users\\user\\WebstormProjects\\blog\\src\\components\\error\\error.tsx",["101"],"import Photo from './error-photo.jpg'\r\nimport s from './error.module.css'\r\nimport {useHistory} from \"react-router\";\r\n\r\n\r\nfunction Error() {\r\n    const history = useHistory()\r\n\r\n    function handleClick() {\r\n        history.push('/menu')\r\n    }\r\n\r\n\r\n    return <div>\r\n        <img src={Photo} alt=\"photo\" className={s.img} />\r\n        <button className={s.button} onClick={handleClick}>GET TO MENU</button>\r\n    </div>\r\n}\r\n\r\nexport default Error",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","severity":1,"message":"107","line":14,"column":9,"nodeType":"108","messageId":"109","endLine":14,"endColumn":20},{"ruleId":"106","severity":1,"message":"110","line":13,"column":8,"nodeType":"108","messageId":"109","endLine":13,"endColumn":13},{"ruleId":"111","severity":1,"message":"112","line":47,"column":37,"nodeType":"113","messageId":"114","endLine":47,"endColumn":50},{"ruleId":"115","severity":1,"message":"116","line":49,"column":18,"nodeType":"117","endLine":49,"endColumn":55},{"ruleId":"106","severity":1,"message":"118","line":3,"column":9,"nodeType":"108","messageId":"109","endLine":3,"endColumn":19},{"ruleId":"115","severity":1,"message":"116","line":49,"column":13,"nodeType":"117","endLine":49,"endColumn":48},{"ruleId":"115","severity":1,"message":"116","line":15,"column":9,"nodeType":"117","endLine":15,"endColumn":58},"no-native-reassign",["119"],"no-negated-in-lhs",["120"],"@typescript-eslint/no-unused-vars","'CommentType' is defined but never used.","Identifier","unusedVar","'Error' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","'resolveSrv' is defined but never used.","no-global-assign","no-unsafe-negation"]